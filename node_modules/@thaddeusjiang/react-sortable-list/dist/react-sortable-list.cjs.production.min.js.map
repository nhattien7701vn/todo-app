{"version":3,"file":"react-sortable-list.cjs.production.min.js","sources":["../src/components/SortableItem.tsx","../src/components/SortableList.tsx"],"sourcesContent":["import React from 'react';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { SortableItemProps } from './SortableList';\n\nexport const SortableItem = (props: SortableItemProps) => {\n  const { DragHandler, className } = props;\n  const { attributes, listeners, setNodeRef, transform, transition } =\n    useSortable({ id: props.id });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n  };\n\n  return DragHandler ? (\n    <div ref={setNodeRef} style={style} className={className}>\n      <DragHandler {...attributes} {...listeners} />\n      {props.children}\n    </div>\n  ) : (\n    <div\n      ref={setNodeRef}\n      style={style}\n      {...attributes}\n      {...listeners}\n      className={className}\n    >\n      {props.children}\n    </div>\n  );\n};\n","import React, { FC } from 'react';\nimport {\n  DndContext,\n  closestCenter,\n  KeyboardSensor,\n  PointerSensor,\n  useSensor,\n  useSensors,\n} from '@dnd-kit/core';\nimport {\n  arrayMove,\n  SortableContext,\n  sortableKeyboardCoordinates,\n  verticalListSortingStrategy,\n  horizontalListSortingStrategy,\n} from '@dnd-kit/sortable';\n\nimport { SortableItem } from './SortableItem';\n\nexport type SortableItemProps = {\n  id: string;\n  DragHandler?: FC;\n  className?: string;\n} & {\n  [key: string]: any;\n};\n\nexport type ItemRenderProps = {\n  item: SortableItemProps;\n};\n\nexport type ChildrenProps = {\n  items: SortableItemProps[];\n};\n\nexport type SortableListProps = {\n  items: SortableItemProps[];\n  setItems: React.Dispatch<React.SetStateAction<SortableItemProps[]>>;\n  itemRender?: ({ item }: ItemRenderProps) => JSX.Element;\n  children?: ({ items }: ChildrenProps) => JSX.Element;\n  horizontal?: boolean;\n  disabled?: boolean;\n};\n\n// TODO: Headless UI Component\nexport const SortableList: FC<SortableListProps> = (props) => {\n  const {\n    items,\n    setItems,\n    children,\n    itemRender,\n    horizontal,\n    disabled = false,\n  } = props;\n\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  );\n\n  if (disabled) {\n    return (\n      <>\n        {children\n          ? children({ items })\n          : items.map((item) => itemRender?.({ item }))}\n      </>\n    );\n  }\n\n  return (\n    <DndContext\n      sensors={sensors}\n      collisionDetection={closestCenter}\n      onDragEnd={handleDragEnd}\n    >\n      <SortableContext\n        items={items}\n        strategy={\n          horizontal\n            ? horizontalListSortingStrategy\n            : verticalListSortingStrategy\n        }\n      >\n        {children\n          ? children({ items })\n          : items.map((item) => {\n              return (\n                <SortableItem key={item.id} id={item.id}>\n                  {/* @ts-ignore */}\n                  {itemRender({ item })}\n                </SortableItem>\n              );\n            })}\n      </SortableContext>\n    </DndContext>\n  );\n\n  function handleDragEnd(event: { active: any; over: any }) {\n    const { active, over } = event;\n\n    if (active.id !== over.id) {\n      setItems((items: SortableItemProps[]) => {\n        const ids = items.map((item: SortableItemProps) => item.id);\n        const oldIndex = ids.indexOf(active.id);\n        const newIndex = ids.indexOf(over.id);\n\n        return arrayMove(items, oldIndex, newIndex);\n      });\n    }\n  }\n};\n"],"names":["SortableItem","props","DragHandler","className","useSortable","id","attributes","listeners","setNodeRef","transition","style","transform","CSS","Transform","toString","React","ref","children","items","setItems","itemRender","horizontal","disabled","sensors","useSensors","useSensor","PointerSensor","KeyboardSensor","coordinateGetter","sortableKeyboardCoordinates","map","item","DndContext","collisionDetection","closestCenter","onDragEnd","event","active","over","ids","oldIndex","indexOf","newIndex","arrayMove","SortableContext","strategy","horizontalListSortingStrategy","verticalListSortingStrategy","key"],"mappings":"0OAKaA,EAAe,SAACC,OACnBC,EAA2BD,EAA3BC,YAAaC,EAAcF,EAAdE,YAEnBC,cAAY,CAAEC,GAAIJ,EAAMI,KADlBC,IAAAA,WAAYC,IAAAA,UAAWC,IAAAA,WAAuBC,IAAAA,WAGhDC,EAAQ,CACZC,UAAWC,MAAIC,UAAUC,WAJgBH,WAKzCF,WAAAA,UAGKP,EACLa,uBAAKC,IAAKR,EAAYE,MAAOA,EAAOP,UAAWA,GAC7CY,gBAACb,mBAAgBI,EAAgBC,IAChCN,EAAMgB,UAGTF,qCACEC,IAAKR,EACLE,MAAOA,GACHJ,EACAC,GACJJ,UAAWA,IAEVF,EAAMgB,uDCiBsC,SAAChB,OAEhDiB,EAMEjB,EANFiB,MACAC,EAKElB,EALFkB,SACAF,EAIEhB,EAJFgB,SACAG,EAGEnB,EAHFmB,WACAC,EAEEpB,EAFFoB,aAEEpB,EADFqB,SAAAA,gBAGIC,EAAUC,aACdC,YAAUC,iBACVD,YAAUE,iBAAgB,CACxBC,iBAAkBC,wCAIlBP,EAEAP,gCACGE,EACGA,EAAS,CAAEC,MAAAA,IACXA,EAAMY,KAAI,SAACC,gBAASX,SAAAA,EAAa,CAAEW,KAAAA,QAM3ChB,gBAACiB,cACCT,QAASA,EACTU,mBAAoBC,gBACpBC,mBAwBmBC,OACbC,EAAiBD,EAAjBC,OAAQC,EAASF,EAATE,KAEZD,EAAOhC,KAAOiC,EAAKjC,IACrBc,GAAS,SAACD,OACFqB,EAAMrB,EAAMY,KAAI,SAACC,UAA4BA,EAAK1B,MAClDmC,EAAWD,EAAIE,QAAQJ,EAAOhC,IAC9BqC,EAAWH,EAAIE,QAAQH,EAAKjC,WAE3BsC,YAAUzB,EAAOsB,EAAUE,QA/BpC3B,gBAAC6B,mBACC1B,MAAOA,EACP2B,SACExB,EACIyB,gCACAC,+BAGL9B,EACGA,EAAS,CAAEC,MAAAA,IACXA,EAAMY,KAAI,SAACC,UAEPhB,gBAACf,GAAagD,IAAKjB,EAAK1B,GAAIA,GAAI0B,EAAK1B,IAElCe,EAAW,CAAEW,KAAAA"}